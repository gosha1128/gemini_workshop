# coding: utf-8

"""
    GSI Floating-Point 32 API

    **Introduction**<br> GSI Technology’s floating-point similarity search API provides an accessible gateway to running searches on GSI’s Gemini® Associative Processing Unit (APU).<br> It works in conjunction with the GSI system management solution which enables users to work with multiple APU boards simultaneously for improved performance.<br><br> **Dataset and Query Format**<br> Dataset embeddings can be in 32- or 64-bit floating point format, and any number of features, e.g. 256 or 512 (there is no upper limit).<br> Query embeddings must have the same floating-point format and number of features as used in the dataset.<br> GSI performs the search and delivers the top-k most similar results.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchAccuracyRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number_of_iterations': 'int',
        'max_hamming': 'int',
        'target_accuracy': 'float',
        'detailed_report': 'str',
        'num_of_boards': 'int',
        'dataset_id': 'str',
        'typical_n_queries': 'int',
        'max_n_queries': 'int',
        'normalize': 'bool',
        'hamming_k': 'int',
        'topk': 'int',
        'neural_matrix_id': 'str',
        'nqueries': 'int',
        'queries_file_p': 'str',
        'indices_file_p': 'str',
        'distance_file_p': 'str',
        'use_existing_query': 'bool'
    }

    attribute_map = {
        'number_of_iterations': 'numberOfIterations',
        'max_hamming': 'maxHamming',
        'target_accuracy': 'targetAccuracy',
        'detailed_report': 'detailed_report',
        'num_of_boards': 'numOfBoards',
        'dataset_id': 'datasetId',
        'typical_n_queries': 'typicalNQueries',
        'max_n_queries': 'maxNQueries',
        'normalize': 'normalize',
        'hamming_k': 'hammingK',
        'topk': 'topk',
        'neural_matrix_id': 'neuralMatrixId',
        'nqueries': 'nqueries',
        'queries_file_p': 'queries_file_p',
        'indices_file_p': 'indices_file_p',
        'distance_file_p': 'distance_file_p',
        'use_existing_query': 'use_existing_query'
    }

    def __init__(self, number_of_iterations=None, max_hamming=None, target_accuracy=None, detailed_report=None, num_of_boards=None, dataset_id=None, typical_n_queries=10, max_n_queries=3100, normalize=False, hamming_k=3200, topk=25, neural_matrix_id=None, nqueries=None, queries_file_p=None, indices_file_p=None, distance_file_p=None, use_existing_query=None):  # noqa: E501
        """SearchAccuracyRequest - a model defined in Swagger"""  # noqa: E501
        self._number_of_iterations = None
        self._max_hamming = None
        self._target_accuracy = None
        self._detailed_report = None
        self._num_of_boards = None
        self._dataset_id = None
        self._typical_n_queries = None
        self._max_n_queries = None
        self._normalize = None
        self._hamming_k = None
        self._topk = None
        self._neural_matrix_id = None
        self._nqueries = None
        self._queries_file_p = None
        self._indices_file_p = None
        self._distance_file_p = None
        self._use_existing_query = None
        self.discriminator = None
        self.number_of_iterations = number_of_iterations
        self.max_hamming = max_hamming
        self.target_accuracy = target_accuracy
        if detailed_report is not None:
            self.detailed_report = detailed_report
        self.num_of_boards = num_of_boards
        self.dataset_id = dataset_id
        if typical_n_queries is not None:
            self.typical_n_queries = typical_n_queries
        if max_n_queries is not None:
            self.max_n_queries = max_n_queries
        if normalize is not None:
            self.normalize = normalize
        if hamming_k is not None:
            self.hamming_k = hamming_k
        if topk is not None:
            self.topk = topk
        if neural_matrix_id is not None:
            self.neural_matrix_id = neural_matrix_id
        self.nqueries = nqueries
        self.queries_file_p = queries_file_p
        self.indices_file_p = indices_file_p
        self.distance_file_p = distance_file_p
        self.use_existing_query = use_existing_query

    @property
    def number_of_iterations(self):
        """Gets the number_of_iterations of this SearchAccuracyRequest.  # noqa: E501

        After the training process you have the weights, you now want to determine the hamming-k for search. to do this we run a search on all the dataset using set of random queries. You create GT for these queries and then you run search on the n queries (e.g. 30). Let’s say accuracy is 80%. Search starts with x hamming k, compares to GT, and checks accuracy. This process continues until the target accuracy is reached (e.g. hamming k = 1000, for target accuracy of 80%). To improve accuracy this process can be repeated. Each search process is an iteration. The default is 3 iterations  # noqa: E501

        :return: The number_of_iterations of this SearchAccuracyRequest.  # noqa: E501
        :rtype: int
        """
        return self._number_of_iterations

    @number_of_iterations.setter
    def number_of_iterations(self, number_of_iterations):
        """Sets the number_of_iterations of this SearchAccuracyRequest.

        After the training process you have the weights, you now want to determine the hamming-k for search. to do this we run a search on all the dataset using set of random queries. You create GT for these queries and then you run search on the n queries (e.g. 30). Let’s say accuracy is 80%. Search starts with x hamming k, compares to GT, and checks accuracy. This process continues until the target accuracy is reached (e.g. hamming k = 1000, for target accuracy of 80%). To improve accuracy this process can be repeated. Each search process is an iteration. The default is 3 iterations  # noqa: E501

        :param number_of_iterations: The number_of_iterations of this SearchAccuracyRequest.  # noqa: E501
        :type: int
        """
        if number_of_iterations is None:
            raise ValueError("Invalid value for `number_of_iterations`, must not be `None`")  # noqa: E501

        self._number_of_iterations = number_of_iterations

    @property
    def max_hamming(self):
        """Gets the max_hamming of this SearchAccuracyRequest.  # noqa: E501

        The maximum hamming k.  # noqa: E501

        :return: The max_hamming of this SearchAccuracyRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_hamming

    @max_hamming.setter
    def max_hamming(self, max_hamming):
        """Sets the max_hamming of this SearchAccuracyRequest.

        The maximum hamming k.  # noqa: E501

        :param max_hamming: The max_hamming of this SearchAccuracyRequest.  # noqa: E501
        :type: int
        """
        if max_hamming is None:
            raise ValueError("Invalid value for `max_hamming`, must not be `None`")  # noqa: E501

        self._max_hamming = max_hamming

    @property
    def target_accuracy(self):
        """Gets the target_accuracy of this SearchAccuracyRequest.  # noqa: E501

        THe desried accuracy, expressed as a percentage.  # noqa: E501

        :return: The target_accuracy of this SearchAccuracyRequest.  # noqa: E501
        :rtype: float
        """
        return self._target_accuracy

    @target_accuracy.setter
    def target_accuracy(self, target_accuracy):
        """Sets the target_accuracy of this SearchAccuracyRequest.

        THe desried accuracy, expressed as a percentage.  # noqa: E501

        :param target_accuracy: The target_accuracy of this SearchAccuracyRequest.  # noqa: E501
        :type: float
        """
        if target_accuracy is None:
            raise ValueError("Invalid value for `target_accuracy`, must not be `None`")  # noqa: E501

        self._target_accuracy = target_accuracy

    @property
    def detailed_report(self):
        """Gets the detailed_report of this SearchAccuracyRequest.  # noqa: E501


        :return: The detailed_report of this SearchAccuracyRequest.  # noqa: E501
        :rtype: str
        """
        return self._detailed_report

    @detailed_report.setter
    def detailed_report(self, detailed_report):
        """Sets the detailed_report of this SearchAccuracyRequest.


        :param detailed_report: The detailed_report of this SearchAccuracyRequest.  # noqa: E501
        :type: str
        """

        self._detailed_report = detailed_report

    @property
    def num_of_boards(self):
        """Gets the num_of_boards of this SearchAccuracyRequest.  # noqa: E501

        The number of boards to be used for this action.  # noqa: E501

        :return: The num_of_boards of this SearchAccuracyRequest.  # noqa: E501
        :rtype: int
        """
        return self._num_of_boards

    @num_of_boards.setter
    def num_of_boards(self, num_of_boards):
        """Sets the num_of_boards of this SearchAccuracyRequest.

        The number of boards to be used for this action.  # noqa: E501

        :param num_of_boards: The num_of_boards of this SearchAccuracyRequest.  # noqa: E501
        :type: int
        """
        if num_of_boards is None:
            raise ValueError("Invalid value for `num_of_boards`, must not be `None`")  # noqa: E501

        self._num_of_boards = num_of_boards

    @property
    def dataset_id(self):
        """Gets the dataset_id of this SearchAccuracyRequest.  # noqa: E501

        The datasetId identifies the specific dataset to search. It is generated using the /import/dataset endpoint.  # noqa: E501

        :return: The dataset_id of this SearchAccuracyRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this SearchAccuracyRequest.

        The datasetId identifies the specific dataset to search. It is generated using the /import/dataset endpoint.  # noqa: E501

        :param dataset_id: The dataset_id of this SearchAccuracyRequest.  # noqa: E501
        :type: str
        """
        if dataset_id is None:
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def typical_n_queries(self):
        """Gets the typical_n_queries of this SearchAccuracyRequest.  # noqa: E501

        Typical number of queries in a search (not more then the Max Number of Queries).  # noqa: E501

        :return: The typical_n_queries of this SearchAccuracyRequest.  # noqa: E501
        :rtype: int
        """
        return self._typical_n_queries

    @typical_n_queries.setter
    def typical_n_queries(self, typical_n_queries):
        """Sets the typical_n_queries of this SearchAccuracyRequest.

        Typical number of queries in a search (not more then the Max Number of Queries).  # noqa: E501

        :param typical_n_queries: The typical_n_queries of this SearchAccuracyRequest.  # noqa: E501
        :type: int
        """

        self._typical_n_queries = typical_n_queries

    @property
    def max_n_queries(self):
        """Gets the max_n_queries of this SearchAccuracyRequest.  # noqa: E501

        Maximum number of queries in a search (lower or equal to Typical Number of Queries).  # noqa: E501

        :return: The max_n_queries of this SearchAccuracyRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_n_queries

    @max_n_queries.setter
    def max_n_queries(self, max_n_queries):
        """Sets the max_n_queries of this SearchAccuracyRequest.

        Maximum number of queries in a search (lower or equal to Typical Number of Queries).  # noqa: E501

        :param max_n_queries: The max_n_queries of this SearchAccuracyRequest.  # noqa: E501
        :type: int
        """

        self._max_n_queries = max_n_queries

    @property
    def normalize(self):
        """Gets the normalize of this SearchAccuracyRequest.  # noqa: E501

        Flag indicates whether dataset should be normalized (of values between 0 to 1).  # noqa: E501

        :return: The normalize of this SearchAccuracyRequest.  # noqa: E501
        :rtype: bool
        """
        return self._normalize

    @normalize.setter
    def normalize(self, normalize):
        """Sets the normalize of this SearchAccuracyRequest.

        Flag indicates whether dataset should be normalized (of values between 0 to 1).  # noqa: E501

        :param normalize: The normalize of this SearchAccuracyRequest.  # noqa: E501
        :type: bool
        """

        self._normalize = normalize

    @property
    def hamming_k(self):
        """Gets the hamming_k of this SearchAccuracyRequest.  # noqa: E501

        The desired hamming k results from the APU search (per dataset or system-default).  # noqa: E501

        :return: The hamming_k of this SearchAccuracyRequest.  # noqa: E501
        :rtype: int
        """
        return self._hamming_k

    @hamming_k.setter
    def hamming_k(self, hamming_k):
        """Sets the hamming_k of this SearchAccuracyRequest.

        The desired hamming k results from the APU search (per dataset or system-default).  # noqa: E501

        :param hamming_k: The hamming_k of this SearchAccuracyRequest.  # noqa: E501
        :type: int
        """

        self._hamming_k = hamming_k

    @property
    def topk(self):
        """Gets the topk of this SearchAccuracyRequest.  # noqa: E501

        Max number of results to re-rank from APU hamming search function.  # noqa: E501

        :return: The topk of this SearchAccuracyRequest.  # noqa: E501
        :rtype: int
        """
        return self._topk

    @topk.setter
    def topk(self, topk):
        """Sets the topk of this SearchAccuracyRequest.

        Max number of results to re-rank from APU hamming search function.  # noqa: E501

        :param topk: The topk of this SearchAccuracyRequest.  # noqa: E501
        :type: int
        """

        self._topk = topk

    @property
    def neural_matrix_id(self):
        """Gets the neural_matrix_id of this SearchAccuracyRequest.  # noqa: E501

        Neural matrix UID. It is generated using the /import/dataset or /import/neuralMatrix endpoints (using default active neural matrix UID if null passed).  # noqa: E501

        :return: The neural_matrix_id of this SearchAccuracyRequest.  # noqa: E501
        :rtype: str
        """
        return self._neural_matrix_id

    @neural_matrix_id.setter
    def neural_matrix_id(self, neural_matrix_id):
        """Sets the neural_matrix_id of this SearchAccuracyRequest.

        Neural matrix UID. It is generated using the /import/dataset or /import/neuralMatrix endpoints (using default active neural matrix UID if null passed).  # noqa: E501

        :param neural_matrix_id: The neural_matrix_id of this SearchAccuracyRequest.  # noqa: E501
        :type: str
        """

        self._neural_matrix_id = neural_matrix_id

    @property
    def nqueries(self):
        """Gets the nqueries of this SearchAccuracyRequest.  # noqa: E501

        Number of queries  # noqa: E501

        :return: The nqueries of this SearchAccuracyRequest.  # noqa: E501
        :rtype: int
        """
        return self._nqueries

    @nqueries.setter
    def nqueries(self, nqueries):
        """Sets the nqueries of this SearchAccuracyRequest.

        Number of queries  # noqa: E501

        :param nqueries: The nqueries of this SearchAccuracyRequest.  # noqa: E501
        :type: int
        """
        if nqueries is None:
            raise ValueError("Invalid value for `nqueries`, must not be `None`")  # noqa: E501

        self._nqueries = nqueries

    @property
    def queries_file_p(self):
        """Gets the queries_file_p of this SearchAccuracyRequest.  # noqa: E501


        :return: The queries_file_p of this SearchAccuracyRequest.  # noqa: E501
        :rtype: str
        """
        return self._queries_file_p

    @queries_file_p.setter
    def queries_file_p(self, queries_file_p):
        """Sets the queries_file_p of this SearchAccuracyRequest.


        :param queries_file_p: The queries_file_p of this SearchAccuracyRequest.  # noqa: E501
        :type: str
        """
        if queries_file_p is None:
            raise ValueError("Invalid value for `queries_file_p`, must not be `None`")  # noqa: E501

        self._queries_file_p = queries_file_p

    @property
    def indices_file_p(self):
        """Gets the indices_file_p of this SearchAccuracyRequest.  # noqa: E501


        :return: The indices_file_p of this SearchAccuracyRequest.  # noqa: E501
        :rtype: str
        """
        return self._indices_file_p

    @indices_file_p.setter
    def indices_file_p(self, indices_file_p):
        """Sets the indices_file_p of this SearchAccuracyRequest.


        :param indices_file_p: The indices_file_p of this SearchAccuracyRequest.  # noqa: E501
        :type: str
        """
        if indices_file_p is None:
            raise ValueError("Invalid value for `indices_file_p`, must not be `None`")  # noqa: E501

        self._indices_file_p = indices_file_p

    @property
    def distance_file_p(self):
        """Gets the distance_file_p of this SearchAccuracyRequest.  # noqa: E501


        :return: The distance_file_p of this SearchAccuracyRequest.  # noqa: E501
        :rtype: str
        """
        return self._distance_file_p

    @distance_file_p.setter
    def distance_file_p(self, distance_file_p):
        """Sets the distance_file_p of this SearchAccuracyRequest.


        :param distance_file_p: The distance_file_p of this SearchAccuracyRequest.  # noqa: E501
        :type: str
        """
        if distance_file_p is None:
            raise ValueError("Invalid value for `distance_file_p`, must not be `None`")  # noqa: E501

        self._distance_file_p = distance_file_p

    @property
    def use_existing_query(self):
        """Gets the use_existing_query of this SearchAccuracyRequest.  # noqa: E501


        :return: The use_existing_query of this SearchAccuracyRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_existing_query

    @use_existing_query.setter
    def use_existing_query(self, use_existing_query):
        """Sets the use_existing_query of this SearchAccuracyRequest.


        :param use_existing_query: The use_existing_query of this SearchAccuracyRequest.  # noqa: E501
        :type: bool
        """
        if use_existing_query is None:
            raise ValueError("Invalid value for `use_existing_query`, must not be `None`")  # noqa: E501

        self._use_existing_query = use_existing_query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchAccuracyRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchAccuracyRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
